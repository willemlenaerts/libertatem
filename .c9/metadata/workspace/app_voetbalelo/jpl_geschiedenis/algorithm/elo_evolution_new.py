{"changed":true,"filter":false,"title":"elo_evolution_new.py","tooltip":"/app_voetbalelo/jpl_geschiedenis/algorithm/elo_evolution_new.py","value":"import pickle\nimport json\nimport pandas as pd\nimport numpy as np\nimport datetime\nimport time\n\n# Import data (don't use database for now)\npanda = pickle.load(open(\"app_voetbalelo/jpl_geschiedenis/algorithm/results/1895-2015-gpgtest.p\",\"rb\"))\n# team_results: aantal kampioenschappen\nteam_results = pickle.load(open(\"app_voetbalelo/jpl_geschiedenis/algorithm/data/teams.p\",\"rb\"))\n# panda[\"DATE_INDEX\"] = 1000000*list(range(len(panda)))\n\n# All teams that played in dataset:\nteams = list(panda[\"HomeTeam\"].unique())\nteams.sort()\n\n# All dates (as unix)\ndates = [int(i) for i in list(panda.index.astype(np.int64) // 10 ** 6)]\n# [str(i) for i in list(panda.index.astype(np.int64) // 10 ** 9)]\n\n# Seasons\nseasons = sorted(list(panda[\"S\"].unique()))\nyears = list(range(int(seasons[0].split(\"-\")[0]),int(seasons[-1].split(\"-\")[0])+1))\nseasons = []\nfor year in years:\n    seasons.append(str(year) + \"-\" + str(year+1)[-2:])\n\n# ELO value for every team on every date (dict with keys teams and values elo\ndata = dict()\nmax_elo = dict()\nmin_elo = dict()\n\n# For every season, define date_index\nstart_index = 0\ninterval_mem = 0\ndate_index = dict()\ndates_index = list()\nlast_season = seasons[0]\nfor season in seasons:\n    if season != seasons[0]:\n        year_interval = int(season[:4]) - int(last_season[:4])\n    else:\n        year_interval = 1\n        \n    start = time.time()\n    dummy = []\n    for team in teams:\n        dummy.append(len(panda[(panda.S == season) & ((panda.HomeTeam == team) | (panda.AwayTeam == team))]))\n    max_speeldagen = max(dummy) + 1 # increment before new season (null value between seasons)\n    if max_speeldagen == 1:\n        max_speeldagen = 30 + 1\n    \n    # Date_index\n    date_index[season] = [interval_mem + 1000000*30*(year_interval-1)+1000000*int(i) for i in list(range(start_index,start_index+max_speeldagen))]\n    interval_mem += 1000000*30*(year_interval-1)\n    start_index += max_speeldagen\n    \n    last_season = season\n    stop = time.time()\n    print(\"Season: \" + season + \" || Time: \" + str(int(stop-start)) + \" || Interval: \" + str(year_interval) + \" year\")\n    # First search max_speeldagen\n    \n    \n\n    dates_index += date_index[season]\n\ndate_index_reversed = dict()\nfor season in seasons:\n    for i in range(len(date_index[season])):\n        date_index_reversed[date_index[season][i]] = season\n\n# Get games_table\ngame_table = []\nfor i in range(len(panda)):\n    game_table.append({\"datum\":dates[i],\n                        \"type\":panda.TYPE[i],\n                        \"wedstrijd\":panda.HomeTeam[i] + \" - \" + panda.AwayTeam[i],\n                        \"score\":panda.FTHG[i] + \" - \" + panda.FTAG[i]})\n\nteam_table = []\nfor counter,team in enumerate(teams):\n    start = time.time()\n    max_elo[team] = []\n    min_elo[team] = []\n    data[team] = dict()\n    \n    wedstrijden_totaal_string = len(pd.concat([panda[(panda.HomeTeam == team)],panda[(panda.AwayTeam == team)]]))\n    winst_string = len(pd.concat([panda[(panda.HomeTeam == team) & (panda.FTHG.astype(float) > panda.FTAG.astype(float))],panda[(panda.AwayTeam == team) & (panda.FTAG.astype(float) > panda.FTHG.astype(float))]]))\n    gelijk_string = len(pd.concat([panda[(panda.HomeTeam == team) & (panda.FTHG.astype(float) == panda.FTAG.astype(float))],panda[(panda.AwayTeam == team) & (panda.FTAG.astype(float) == panda.FTHG.astype(float))]]))\n    verlies_string = len(pd.concat([panda[(panda.HomeTeam == team) & (panda.FTHG.astype(float) < panda.FTAG.astype(float))],panda[(panda.AwayTeam == team) & (panda.FTAG.astype(float) < panda.FTHG.astype(float))]]))\n    \n    # for i in range(len(panda[panda.HomeTeam == team])):\n    #     wedstrijden_totaal_string += 1\n    #     if int(panda[panda.HomeTeam == team].FTHG[i]) > int(panda[panda.HomeTeam == team].FTAG[i]):\n    #         winst_string += 1\n    #     elif int(panda[panda.HomeTeam == team].FTHG[i]) == int(panda[panda.HomeTeam == team].FTAG[i]):\n    #         gelijk_string += 1\n    #     else:    \n    #         verlies_string += 1\n    \n    # for i in range(len(panda[panda.AwayTeam == team])):\n    #     wedstrijden_totaal_string += 1\n    #     if int(panda[panda.AwayTeam == team].FTHG[i]) > int(panda[panda.AwayTeam == team].FTAG[i]):\n    #         verlies_string += 1\n    #     elif int(panda[panda.AwayTeam == team].FTHG[i]) == int(panda[panda.AwayTeam == team].FTAG[i]):\n    #         gelijk_string += 1\n    #     else:    \n    #         winst_string += 1            \n    \n    doelpuntensaldo = sum([int(i) for i in pd.concat([panda[(panda.HomeTeam == team)][\"FTHG\"],panda[(panda.AwayTeam == team)][\"FTAG\"]])]) - sum([int(i) for i in pd.concat([panda[(panda.HomeTeam == team)][\"FTAG\"],panda[(panda.AwayTeam == team)][\"FTHG\"]])])\n    doelpuntensaldo_perwedstrijd = round(doelpuntensaldo/wedstrijden_totaal_string,2)\n    team_table.append({ \"team\":team,\n                        \"gemelo\": str(int(sum(pd.concat([panda[(panda.HomeTeam == team)][\"HomeElo\"],panda[(panda.AwayTeam == team)][\"AwayElo\"]]))/len(pd.concat([panda[(panda.HomeTeam == team)][\"HomeElo\"],panda[(panda.AwayTeam == team)][\"AwayElo\"]])))),\n                        \"maxelo\": str(int(max(pd.concat([panda[(panda.HomeTeam == team)][\"HomeElo\"],panda[(panda.AwayTeam == team)][\"AwayElo\"]])))),\n                        \"minelo\": str(int(min(pd.concat([panda[(panda.HomeTeam == team)][\"HomeElo\"],panda[(panda.AwayTeam == team)][\"AwayElo\"]])))),\n                        \"kamp\": str(len(team_results[team])),\n                        \"seizoenen\": len(list(set(pd.concat([panda[(panda.HomeTeam == team)],panda[(panda.AwayTeam == team)]]).S))),\n                        \"wedstrijden\":str(wedstrijden_totaal_string),\n                        \"wedstrijdenwinst\": str(winst_string),\n                        \"wedstrijdengelijk\":str(gelijk_string),\n                        \"wedstrijdenverlies\":str(verlies_string),\n                        \"goalsvoor\": sum([int(i) for i in pd.concat([panda[(panda.HomeTeam == team)][\"FTHG\"],panda[(panda.AwayTeam == team)][\"FTAG\"]])]) ,\n                        \"goalstegen\": sum([int(i) for i in pd.concat([panda[(panda.HomeTeam == team)][\"FTAG\"],panda[(panda.AwayTeam == team)][\"FTHG\"]])]),\n                        \"winperc\": str(round(100*(winst_string/wedstrijden_totaal_string),1)),\n                        \"doelpuntensaldo\": doelpuntensaldo_perwedstrijd                   \n                        })\n    data[team][\"kampioenschappen\"] = len(team_results[team])\n    data[team][\"gemiddelde elo\"] = int(sum(pd.concat([panda[(panda.HomeTeam == team)][\"HomeElo\"],panda[(panda.AwayTeam == team)][\"AwayElo\"]]))/len(pd.concat([panda[(panda.HomeTeam == team)][\"HomeElo\"],panda[(panda.AwayTeam == team)][\"AwayElo\"]])))\n    data[team][\"hoogste elo\"] = int(max(pd.concat([panda[(panda.HomeTeam == team)][\"HomeElo\"],panda[(panda.AwayTeam == team)][\"AwayElo\"]])))\n    data[team][\"laagste elo\"] = int(min(pd.concat([panda[(panda.HomeTeam == team)][\"HomeElo\"],panda[(panda.AwayTeam == team)][\"AwayElo\"]])))\n    \n    for season in seasons:\n        data[team][season] = list()\n        dataframe_elo = pd.concat([panda[(panda.HomeTeam == team) & (panda.S == season)][\"HomeElo\"],panda[(panda.AwayTeam == team) & (panda.S == season)][\"AwayElo\"]]).sort_index()\n        # dataframe_date_index = pd.concat([panda[(panda.HomeTeam == team) & (panda.S == season)][\"DATE_INDEX\"],panda[(panda.AwayTeam == team) & (panda.S == season)][\"DATE_INDEX\"]]).sort_index()\n        dataframe_wedstrijd = pd.concat([team + \" - \" + panda[(panda.HomeTeam == team) & (panda.S == season)][\"AwayTeam\"],panda[(panda.AwayTeam == team) & (panda.S == season)][\"HomeTeam\"] + \" - \" + team ]).sort_index()\n        dataframe_3 = pd.concat([panda[(panda.HomeTeam == team) & (panda.S == season)][\"FTHG\"],panda[(panda.AwayTeam == team) & (panda.S == season)][\"FTHG\"]]).sort_index()\n        dataframe_4 = pd.concat([panda[(panda.HomeTeam == team) & (panda.S == season)][\"FTAG\"],panda[(panda.AwayTeam == team) & (panda.S == season)][\"FTAG\"]]).sort_index()\n        dataframe_type = pd.concat([panda[(panda.HomeTeam == team) & (panda.S == season)][\"TYPE\"],panda[(panda.AwayTeam == team) & (panda.S == season)][\"TYPE\"]]).sort_index()\n\n        # [0]: Datum index (niet echte datum maar plotdatum)\n        data[team][season].append(date_index[season])\n        # data[team][season].append(date_index[season][:len(dataframe_elo)])\n        \n        # [1]: ELO na wedstrijd\n        dataframe_elo_list = [int(i) for i in list(dataframe_elo)]\n        data[team][season].append([])\n        for i in range(len(date_index[season])):\n            try:\n                data[team][season][-1].append(dataframe_elo_list[i])\n            except:\n                data[team][season][-1].append(None)\n        # data[team][season].append([int(i) for i in list(dataframe_elo)])\n        \n        # Get maximum elo\n        # Remove None's\n        \n        try:\n            max_elo[team].append(max(list(filter(None,data[team][season][-1]))))\n        except:\n            # Dit seizoen speelde ploeg niet\n            max_elo[team].append(0)\n\n        # Get minimum elo\n        try:\n            min_elo[team].append(min(list(filter(None,data[team][season][-1]))))\n        except:\n            # Dit seizoen speelde ploeg niet\n            min_elo[team].append(0)\n            \n        # [2]: Wedstrijd in string (HomeTeam - AwayTeam)\n        dataframe_wedstrijd_list = list(dataframe_wedstrijd)\n        data[team][season].append([])\n        for i in range(len(date_index[season])):\n            try:\n                data[team][season][-1].append(dataframe_wedstrijd_list[i])\n            except:\n                data[team][season][-1].append(None)\n        # data[team][season].append(list(dataframe_wedstrijd))\n        \n        # [3]: Score (Home Goals - Away Goals)\n        data[team][season].append([])\n        for i in range(len(date_index[season])):\n            try:\n                data[team][season][-1].append(dataframe_3[i] + \" - \" + dataframe_4[i])\n            except:\n                data[team][season][-1].append(None)\n        \n        \n        # data[team][season].append([])\n        # for i in range(len(dataframe_3)):\n        #     data[team][season][-1].append(dataframe_3[i] + \" - \" + dataframe_4[i])\n        \n        # [4]: Datum wedstrijd\n        dataframe_elo_index_list = [int(i) for i in list(dataframe_elo.index.astype(np.int64) // 10 ** 6)]\n        data[team][season].append([])\n        for i in range(len(date_index[season])):\n            try:\n                data[team][season][-1].append(dataframe_elo_index_list[i])\n            except:\n                data[team][season][-1].append(None)\n        \n        # data[team][season].append([int(i) for i in list(dataframe_elo.index.astype(np.int64) // 10 ** 6)])\n        \n        # [5]: Type of game\n        dataframe_type_list = list(dataframe_type)\n        data[team][season].append([])\n        for i in range(len(date_index[season])):\n            try:\n                data[team][season][-1].append(dataframe_type_list[i])\n            except:\n                data[team][season][-1].append(None)        \n\n        # data[team][season].append(list(dataframe_type))\n        \n        # [6]: Kampioen (1: ja, 0: nee)\n        data[team][season].append(0)   \n        if len(team_results[team]) > 0:\n            for kampioenschap_seizoen in team_results[team]:\n                if kampioenschap_seizoen == season:\n                    data[team][season][-1] = 1\n                    break\n        \n    max_elo[team] = max(max_elo[team])\n    min_elo[team] = min(list(filter((0).__ne__, min_elo[team])))\n    \n    stop = time.time()\n    print(\"Team: \" + team + \" || Time: \" + str(int(stop-start)) + \" s\")\n    \nmax_elo_data = dict()\nfor team in teams:\n    max_elo_data[team] = list()\n    for s in range(len(seasons)):\n        for i in range(len(data[team][seasons[s]][1])):\n            if data[team][seasons[s]][1][i] == max_elo[team]:\n                max_elo_data[team].append([s,i])\n\nmin_elo_data = dict()\nfor team in teams:\n    min_elo_data[team] = list()\n    for s in range(len(seasons)):\n        for i in range(len(data[team][seasons[s]][1])):\n            if data[team][seasons[s]][1][i] == min_elo[team]:\n                min_elo_data[team].append([s,i])\n\n# pickle.dump(data,open(\"app_voetbalelo/jpl_geschiedenis/algorithm/results/elo-evolution.p\",\"wb\"))\n# pickle.dump(teams,open(\"app_voetbalelo/jpl_geschiedenis/algorithm/results/teams.p\",\"wb\"))\n# pickle.dump(dates,open(\"app_voetbalelo/jpl_geschiedenis/algorithm/results/dates.p\",\"wb\"))\n# pickle.dump(seasons,open(\"app_voetbalelo/jpl_geschiedenis/algorithm/results/seasons.p\",\"wb\"))\n# pickle.dump(max_elo_data,open(\"app_voetbalelo/jpl_geschiedenis/algorithm/results/max_elo_data.p\",\"wb\"))\n\n# Per team\nfor team in teams:\n    data_team = dict()\n    data_team[team] = data[team]\n    json.dump(data_team,open(\"app_voetbalelo/jpl_geschiedenis/algorithm/results/json.dump/team/\" + team + \".json\",\"w\"))\n\njson.dump(data,open(\"app_voetbalelo/jpl_geschiedenis/algorithm/results/json.dump/elo-evolution.json\",\"w\"))\njson.dump(team_table,open(\"app_voetbalelo/jpl_geschiedenis/algorithm/results/json.dump/team_table.json\",\"w\"))\njson.dump(game_table,open(\"app_voetbalelo/jpl_geschiedenis/algorithm/results/json.dump/game_table.json\",\"w\"))\njson.dump(teams,open(\"app_voetbalelo/jpl_geschiedenis/algorithm/results/json.dump/teams.json\",\"w\"))\njson.dump(date_index,open(\"app_voetbalelo/jpl_geschiedenis/algorithm/results/json.dump/date_index.json\",\"w\"))\njson.dump(date_index_reversed,open(\"app_voetbalelo/jpl_geschiedenis/algorithm/results/json.dump/date_index_reversed.json\",\"w\"))\njson.dump(seasons,open(\"app_voetbalelo/jpl_geschiedenis/algorithm/results/json.dump/seasons.json\",\"w\"))\njson.dump(max_elo_data,open(\"app_voetbalelo/jpl_geschiedenis/algorithm/results/json.dump/max_elo_data.json\",\"w\"))\njson.dump(min_elo_data,open(\"app_voetbalelo/jpl_geschiedenis/algorithm/results/json.dump/min_elo_data.json\",\"w\"))","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":24,"column":2},"end":{"row":24,"column":3},"action":"insert","lines":["a"],"id":5061}],[{"start":{"row":24,"column":3},"end":{"row":24,"column":4},"action":"insert","lines":["s"],"id":5062}],[{"start":{"row":24,"column":4},"end":{"row":24,"column":5},"action":"insert","lines":["o"],"id":5063}],[{"start":{"row":24,"column":5},"end":{"row":24,"column":6},"action":"insert","lines":["n"],"id":5064}],[{"start":{"row":24,"column":6},"end":{"row":24,"column":7},"action":"insert","lines":["s"],"id":5065}],[{"start":{"row":24,"column":7},"end":{"row":24,"column":8},"action":"insert","lines":[" "],"id":5066}],[{"start":{"row":24,"column":8},"end":{"row":24,"column":9},"action":"insert","lines":["="],"id":5067}],[{"start":{"row":24,"column":9},"end":{"row":24,"column":10},"action":"insert","lines":[" "],"id":5068}],[{"start":{"row":24,"column":10},"end":{"row":24,"column":11},"action":"insert","lines":["["],"id":5069}],[{"start":{"row":24,"column":11},"end":{"row":24,"column":12},"action":"insert","lines":["]"],"id":5070}],[{"start":{"row":26,"column":10},"end":{"row":26,"column":22},"action":"remove","lines":["s_dummy = []"],"id":5071},{"start":{"row":26,"column":10},"end":{"row":26,"column":11},"action":"insert","lines":["s"]}],[{"start":{"row":26,"column":11},"end":{"row":26,"column":12},"action":"insert","lines":["."],"id":5072}],[{"start":{"row":26,"column":12},"end":{"row":26,"column":13},"action":"insert","lines":["a"],"id":5073}],[{"start":{"row":26,"column":13},"end":{"row":26,"column":14},"action":"insert","lines":["p"],"id":5074}],[{"start":{"row":26,"column":14},"end":{"row":26,"column":15},"action":"insert","lines":["p"],"id":5075}],[{"start":{"row":26,"column":15},"end":{"row":26,"column":16},"action":"insert","lines":["e"],"id":5076}],[{"start":{"row":26,"column":16},"end":{"row":26,"column":17},"action":"insert","lines":["n"],"id":5077}],[{"start":{"row":26,"column":17},"end":{"row":26,"column":18},"action":"insert","lines":["d"],"id":5078}],[{"start":{"row":26,"column":18},"end":{"row":26,"column":19},"action":"insert","lines":["("],"id":5079}],[{"start":{"row":26,"column":19},"end":{"row":26,"column":20},"action":"insert","lines":["s"],"id":5080}],[{"start":{"row":26,"column":20},"end":{"row":26,"column":21},"action":"insert","lines":["t"],"id":5081}],[{"start":{"row":26,"column":21},"end":{"row":26,"column":22},"action":"insert","lines":["r"],"id":5082}],[{"start":{"row":26,"column":22},"end":{"row":26,"column":23},"action":"insert","lines":["("],"id":5083}],[{"start":{"row":26,"column":23},"end":{"row":26,"column":24},"action":"insert","lines":["y"],"id":5084}],[{"start":{"row":26,"column":24},"end":{"row":26,"column":25},"action":"insert","lines":["e"],"id":5085}],[{"start":{"row":26,"column":25},"end":{"row":26,"column":26},"action":"insert","lines":["a"],"id":5086}],[{"start":{"row":26,"column":26},"end":{"row":26,"column":27},"action":"insert","lines":["r"],"id":5087}],[{"start":{"row":26,"column":27},"end":{"row":26,"column":28},"action":"insert","lines":[")"],"id":5088}],[{"start":{"row":26,"column":28},"end":{"row":26,"column":29},"action":"insert","lines":[" "],"id":5089}],[{"start":{"row":26,"column":29},"end":{"row":26,"column":30},"action":"insert","lines":["+"],"id":5090}],[{"start":{"row":26,"column":30},"end":{"row":26,"column":31},"action":"insert","lines":[" "],"id":5091}],[{"start":{"row":26,"column":31},"end":{"row":26,"column":32},"action":"insert","lines":["\""],"id":5092}],[{"start":{"row":26,"column":32},"end":{"row":26,"column":33},"action":"insert","lines":["-"],"id":5093}],[{"start":{"row":26,"column":33},"end":{"row":26,"column":34},"action":"insert","lines":["\""],"id":5094}],[{"start":{"row":26,"column":34},"end":{"row":26,"column":35},"action":"insert","lines":[" "],"id":5095}],[{"start":{"row":26,"column":35},"end":{"row":26,"column":36},"action":"insert","lines":["+"],"id":5096}],[{"start":{"row":26,"column":36},"end":{"row":26,"column":37},"action":"insert","lines":[" "],"id":5097}],[{"start":{"row":26,"column":37},"end":{"row":26,"column":38},"action":"insert","lines":["\""],"id":5098}],[{"start":{"row":26,"column":37},"end":{"row":26,"column":38},"action":"remove","lines":["\""],"id":5099}],[{"start":{"row":26,"column":37},"end":{"row":26,"column":38},"action":"insert","lines":["s"],"id":5100}],[{"start":{"row":26,"column":38},"end":{"row":26,"column":39},"action":"insert","lines":["t"],"id":5101}],[{"start":{"row":26,"column":39},"end":{"row":26,"column":40},"action":"insert","lines":["r"],"id":5102}],[{"start":{"row":26,"column":40},"end":{"row":26,"column":41},"action":"insert","lines":["("],"id":5103}],[{"start":{"row":26,"column":41},"end":{"row":26,"column":42},"action":"insert","lines":["y"],"id":5104}],[{"start":{"row":26,"column":42},"end":{"row":26,"column":43},"action":"insert","lines":["e"],"id":5105}],[{"start":{"row":26,"column":43},"end":{"row":26,"column":44},"action":"insert","lines":["a"],"id":5106}],[{"start":{"row":26,"column":44},"end":{"row":26,"column":45},"action":"insert","lines":["r"],"id":5107}],[{"start":{"row":26,"column":45},"end":{"row":26,"column":46},"action":"insert","lines":["+"],"id":5108}],[{"start":{"row":26,"column":46},"end":{"row":26,"column":47},"action":"insert","lines":["1"],"id":5109}],[{"start":{"row":26,"column":47},"end":{"row":26,"column":48},"action":"insert","lines":[")"],"id":5110}],[{"start":{"row":26,"column":48},"end":{"row":26,"column":49},"action":"insert","lines":["."],"id":5111}],[{"start":{"row":26,"column":48},"end":{"row":26,"column":49},"action":"remove","lines":["."],"id":5112}],[{"start":{"row":26,"column":48},"end":{"row":26,"column":49},"action":"insert","lines":["["],"id":5113}],[{"start":{"row":26,"column":49},"end":{"row":26,"column":50},"action":"insert","lines":["-"],"id":5114}],[{"start":{"row":26,"column":50},"end":{"row":26,"column":51},"action":"insert","lines":["2"],"id":5115}],[{"start":{"row":26,"column":51},"end":{"row":26,"column":52},"action":"insert","lines":[":"],"id":5116}],[{"start":{"row":26,"column":52},"end":{"row":26,"column":53},"action":"insert","lines":["]"],"id":5117}],[{"start":{"row":26,"column":53},"end":{"row":26,"column":54},"action":"insert","lines":[")"],"id":5118}],[{"start":{"row":27,"column":0},"end":{"row":28,"column":0},"action":"remove","lines":["",""],"id":5119}],[{"start":{"row":49,"column":94},"end":{"row":50,"column":0},"action":"insert","lines":["",""],"id":5120},{"start":{"row":50,"column":0},"end":{"row":50,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":50,"column":4},"end":{"row":50,"column":5},"action":"insert","lines":["i"],"id":5121}],[{"start":{"row":50,"column":5},"end":{"row":50,"column":6},"action":"insert","lines":["f"],"id":5122}],[{"start":{"row":50,"column":6},"end":{"row":50,"column":7},"action":"insert","lines":[" "],"id":5123}],[{"start":{"row":50,"column":7},"end":{"row":50,"column":8},"action":"insert","lines":["m"],"id":5124}],[{"start":{"row":50,"column":8},"end":{"row":50,"column":9},"action":"insert","lines":["a"],"id":5125}],[{"start":{"row":50,"column":9},"end":{"row":50,"column":10},"action":"insert","lines":["x"],"id":5126}],[{"start":{"row":50,"column":7},"end":{"row":50,"column":10},"action":"remove","lines":["max"],"id":5127},{"start":{"row":50,"column":7},"end":{"row":50,"column":21},"action":"insert","lines":["max_speeldagen"]}],[{"start":{"row":50,"column":21},"end":{"row":50,"column":22},"action":"insert","lines":[" "],"id":5128}],[{"start":{"row":50,"column":22},"end":{"row":50,"column":23},"action":"insert","lines":["="],"id":5129}],[{"start":{"row":50,"column":23},"end":{"row":50,"column":24},"action":"insert","lines":["="],"id":5130}],[{"start":{"row":50,"column":24},"end":{"row":50,"column":25},"action":"insert","lines":[" "],"id":5131}],[{"start":{"row":50,"column":25},"end":{"row":50,"column":26},"action":"insert","lines":["1"],"id":5132}],[{"start":{"row":50,"column":26},"end":{"row":50,"column":27},"action":"insert","lines":[":"],"id":5133}],[{"start":{"row":50,"column":27},"end":{"row":51,"column":0},"action":"insert","lines":["",""],"id":5134},{"start":{"row":51,"column":0},"end":{"row":51,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":51,"column":8},"end":{"row":51,"column":9},"action":"insert","lines":["m"],"id":5135}],[{"start":{"row":51,"column":9},"end":{"row":51,"column":10},"action":"insert","lines":["a"],"id":5136}],[{"start":{"row":51,"column":10},"end":{"row":51,"column":11},"action":"insert","lines":["x"],"id":5137}],[{"start":{"row":50,"column":11},"end":{"row":50,"column":12},"action":"insert","lines":[" "],"id":5138}],[{"start":{"row":50,"column":11},"end":{"row":50,"column":12},"action":"remove","lines":[" "],"id":5139}],[{"start":{"row":51,"column":11},"end":{"row":51,"column":12},"action":"insert","lines":["_"],"id":5140}],[{"start":{"row":51,"column":12},"end":{"row":51,"column":13},"action":"insert","lines":["s"],"id":5141}],[{"start":{"row":51,"column":13},"end":{"row":51,"column":14},"action":"insert","lines":["p"],"id":5142}],[{"start":{"row":51,"column":14},"end":{"row":51,"column":15},"action":"insert","lines":["e"],"id":5143}],[{"start":{"row":51,"column":15},"end":{"row":51,"column":16},"action":"insert","lines":["e"],"id":5144}],[{"start":{"row":51,"column":16},"end":{"row":51,"column":17},"action":"insert","lines":["l"],"id":5145}],[{"start":{"row":51,"column":17},"end":{"row":51,"column":18},"action":"insert","lines":["d"],"id":5146}],[{"start":{"row":51,"column":18},"end":{"row":51,"column":19},"action":"insert","lines":["a"],"id":5147}],[{"start":{"row":51,"column":19},"end":{"row":51,"column":20},"action":"insert","lines":["e"],"id":5148}],[{"start":{"row":51,"column":19},"end":{"row":51,"column":20},"action":"remove","lines":["e"],"id":5149}],[{"start":{"row":51,"column":19},"end":{"row":51,"column":20},"action":"insert","lines":["g"],"id":5150}],[{"start":{"row":51,"column":20},"end":{"row":51,"column":21},"action":"insert","lines":["e"],"id":5151}],[{"start":{"row":51,"column":21},"end":{"row":51,"column":22},"action":"insert","lines":["n"],"id":5152}],[{"start":{"row":51,"column":22},"end":{"row":51,"column":23},"action":"insert","lines":[" "],"id":5153}],[{"start":{"row":51,"column":23},"end":{"row":51,"column":24},"action":"insert","lines":["="],"id":5154}],[{"start":{"row":51,"column":24},"end":{"row":51,"column":25},"action":"insert","lines":[" "],"id":5155}],[{"start":{"row":51,"column":25},"end":{"row":51,"column":26},"action":"insert","lines":["3"],"id":5156}],[{"start":{"row":51,"column":26},"end":{"row":51,"column":27},"action":"insert","lines":["0"],"id":5157}],[{"start":{"row":51,"column":27},"end":{"row":51,"column":28},"action":"insert","lines":[" "],"id":5158}],[{"start":{"row":51,"column":28},"end":{"row":51,"column":29},"action":"insert","lines":["+"],"id":5159}],[{"start":{"row":51,"column":29},"end":{"row":51,"column":30},"action":"insert","lines":[" "],"id":5160}],[{"start":{"row":51,"column":30},"end":{"row":51,"column":31},"action":"insert","lines":["1"],"id":5161}]]},"ace":{"folds":[],"scrolltop":3811,"scrollleft":0,"selection":{"start":{"row":251,"column":0},"end":{"row":251,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":13,"state":"start","mode":"ace/mode/python"}},"timestamp":1435771401000}